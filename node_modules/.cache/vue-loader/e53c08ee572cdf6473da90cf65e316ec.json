{"remainingRequest":"/Users/whats0n/Documents/home-projects/scanner-redirect/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/whats0n/Documents/home-projects/scanner-redirect/src/components/Stream.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/whats0n/Documents/home-projects/scanner-redirect/src/components/Stream.vue","mtime":1542838260534},{"path":"/Users/whats0n/Documents/home-projects/scanner-redirect/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/whats0n/Documents/home-projects/scanner-redirect/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/whats0n/Documents/home-projects/scanner-redirect/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/whats0n/Documents/home-projects/scanner-redirect/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { QrcodeStream } from 'vue-qrcode-reader'\nexport default {\n  name: 'Stream',\n  components: {\n    QrcodeStream\n  },\n  data: () => ({\n    isValid: false,\n    validating: false,\n    camera: {},\n    result: null,\n\n    loading: false,\n    firstLoad: true\n  }),\n  computed: {\n    cameraForzen () {\n      return this.camera === false || (this.loading && !this.firstLoad)\n    }\n  },\n  methods: {\n    async handleInit (promise) {\n      this.loading = true\n\n      try {\n        await promise\n      } catch (error) {\n        console.error(error)\n        this.$emit('support', false)\n      } finally {\n        this.firstLoad = false\n        this.loading = false\n      }\n    },\n\n    async handleDecode (content) {\n      this.result = content\n\n      this.stopCamera()\n\n      this.validating = true\n      this.isValid = await this.validate(content)\n      this.validating = false\n\n      if (this.isValid) {\n        this.$emit('success', this.result)\n        this.startCamera()\n      } else {\n        setTimeout(() => {\n          this.startCamera()\n        }, 2000)\n      }\n    },\n\n    stopCamera () {\n      this.camera = false\n    },\n\n    startCamera () {\n      this.camera = null\n    },\n\n    validate (content) {\n      return new Promise(resolve => resolve(new RegExp('^(http|https)://').test(content)))\n    }\n  }\n}\n",{"version":3,"sources":["Stream.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Stream.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <QrcodeStream\n    :camera=\"camera\"\n    @decode=\"handleDecode\"\n    @init=\"handleInit\"\n  >\n    <div\n      v-show=\"cameraForzen\"\n      class=\"validation-layer\"\n    >\n      <div\n        v-if=\"validating\"\n        class=\"validation-notice\"\n      >\n        Long validation in progress...\n      </div>\n\n      <div\n        v-else\n        class=\"validation-result\"\n      >\n        <div\n          v-if=\"!isValid\"\n          class=\"is-invalid\"\n        >\n          This is NOT a URL\n        </div>\n      </div>\n    </div>\n  </QrcodeStream>\n</template>\n\n<script>\nimport { QrcodeStream } from 'vue-qrcode-reader'\nexport default {\n  name: 'Stream',\n  components: {\n    QrcodeStream\n  },\n  data: () => ({\n    isValid: false,\n    validating: false,\n    camera: {},\n    result: null,\n\n    loading: false,\n    firstLoad: true\n  }),\n  computed: {\n    cameraForzen () {\n      return this.camera === false || (this.loading && !this.firstLoad)\n    }\n  },\n  methods: {\n    async handleInit (promise) {\n      this.loading = true\n\n      try {\n        await promise\n      } catch (error) {\n        console.error(error)\n        this.$emit('support', false)\n      } finally {\n        this.firstLoad = false\n        this.loading = false\n      }\n    },\n\n    async handleDecode (content) {\n      this.result = content\n\n      this.stopCamera()\n\n      this.validating = true\n      this.isValid = await this.validate(content)\n      this.validating = false\n\n      if (this.isValid) {\n        this.$emit('success', this.result)\n        this.startCamera()\n      } else {\n        setTimeout(() => {\n          this.startCamera()\n        }, 2000)\n      }\n    },\n\n    stopCamera () {\n      this.camera = false\n    },\n\n    startCamera () {\n      this.camera = null\n    },\n\n    validate (content) {\n      return new Promise(resolve => resolve(new RegExp('^(http|https)://').test(content)))\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.qrcode-stream {\n  width: 100vw;\n  height: 100vh;\n\n  &__inner-wrapper,\n  &__camera,\n  &__pause-frame {\n    width: 100%;\n    height: 100%;\n  }\n  &__camera,\n  &__pause-frame {\n    object-fit: cover;\n  }\n}\n\n.validation-layer {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n\n  background-color: rgba(255, 255, 255, .8);\n  text-align: center;\n  padding: 10px;\n\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n}\n\n.validation-notice,\n.validation-result {\n  font-size: 24px;\n  font-weight: 700;\n}\n\n.is-valid {\n  color: green;\n}\n.is-invalid {\n  color: red;\n}\n</style>\n"]}]}